#!/usr/bin/env python3
"""
Script de test pour les endpoints du backend
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_endpoints():
    """Teste les endpoints du backend"""
    print("üß™ Test des endpoints du backend")
    print("=" * 40)
    
    # Test 1: V√©rifier que le serveur r√©pond
    try:
        response = requests.get(f"{BASE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ Serveur accessible")
        else:
            print(f"‚ùå Serveur r√©pond avec code: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur")
        print("   Assurez-vous que le backend est d√©marr√©: python -m uvicorn main:app --reload")
        return False
    
    # Test 2: Lister les fichiers PDF
    try:
        response = requests.get(f"{BASE_URL}/api/constitutions/files/list")
        if response.status_code == 200:
            files = response.json()
            print(f"‚úÖ Endpoint /files/list fonctionne ({len(files)} fichiers)")
            for file in files:
                print(f"   - {file['filename']}")
        else:
            print(f"‚ùå Endpoint /files/list √©choue: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test /files/list: {e}")
    
    # Test 3: Lister les constitutions depuis la DB
    try:
        response = requests.get(f"{BASE_URL}/api/constitutions/db/list")
        if response.status_code == 200:
            constitutions = response.json()
            print(f"‚úÖ Endpoint /db/list fonctionne ({len(constitutions)} constitutions)")
            for constitution in constitutions:
                print(f"   - {constitution.get('title', 'N/A')} ({constitution.get('filename', 'N/A')})")
        else:
            print(f"‚ùå Endpoint /db/list √©choue: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test /db/list: {e}")
    
    # Test 4: Analyser les fichiers
    try:
        response = requests.post(f"{BASE_URL}/api/constitutions/analyze-files")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Endpoint /analyze-files fonctionne")
            print(f"   Message: {result.get('message', 'N/A')}")
            processed_files = result.get('processed_files', [])
            if processed_files:
                print(f"   Fichiers trait√©s: {len(processed_files)}")
                for file in processed_files:
                    print(f"     - {file.get('filename', 'N/A')}: {file.get('title', 'N/A')}")
            else:
                print("   Aucun nouveau fichier √† traiter")
        else:
            print(f"‚ùå Endpoint /analyze-files √©choue: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test /analyze-files: {e}")
    
    print("\n" + "=" * 40)
    print("üéØ R√©sum√© des tests")
    print("Si tous les tests sont pass√©s, le backend fonctionne correctement.")
    print("Si certains tests √©chouent, v√©rifiez:")
    print("1. Que le backend est d√©marr√©")
    print("2. Que la base de donn√©es est initialis√©e")
    print("3. Que les fichiers PDF sont dans le dossier 'Fichier'")
    print("4. Que OPENAI_API_KEY est configur√©e dans .env")

if __name__ == "__main__":
    test_endpoints() 