#!/usr/bin/env python3
"""
Script pour v√©rifier l'√©tat de la base de donn√©es
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent))

from app.database import engine, Base
from app.models.constitution import Constitution
from sqlalchemy.orm import sessionmaker

def check_database():
    """V√©rifie l'√©tat de la base de donn√©es"""
    print("üîç V√©rification de la base de donn√©es")
    print("=" * 40)
    
    try:
        # Cr√©er les tables si elles n'existent pas
        print("üìã Cr√©ation des tables...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es/v√©rifi√©es")
        
        # V√©rifier les constitutions existantes
        Session = sessionmaker(bind=engine)
        db = Session()
        
        try:
            constitutions = db.query(Constitution).all()
            print(f"üìä {len(constitutions)} constitution(s) trouv√©e(s) en base:")
            
            for constitution in constitutions:
                print(f"   - ID: {constitution.id}")
                print(f"     Titre: {constitution.title}")
                print(f"     Fichier: {constitution.filename}")
                print(f"     Ann√©e: {constitution.year}")
                print(f"     Statut: {constitution.status}")
                print(f"     Cr√©√© le: {constitution.created_at}")
                print()
            
            if not constitutions:
                print("‚ÑπÔ∏è Aucune constitution en base de donn√©es")
                print("   Cela peut √™tre normal si aucun fichier n'a encore √©t√© analys√©")
        
        finally:
            db.close()
        
        # V√©rifier les fichiers PDF
        files_dir = Path("Fichier")
        if files_dir.exists():
            pdf_files = list(files_dir.glob("*.pdf"))
            print(f"üìÅ {len(pdf_files)} fichier(s) PDF trouv√©(s) dans le dossier 'Fichier':")
            for pdf_file in pdf_files:
                print(f"   - {pdf_file.name}")
        else:
            print("‚ùå Dossier 'Fichier' non trouv√©")
        
        # V√©rifier la configuration OpenAI
        openai_api_key = os.getenv("OPENAI_API_KEY")
        if openai_api_key:
            print("‚úÖ OPENAI_API_KEY configur√©e")
        else:
            print("‚ùå OPENAI_API_KEY non configur√©e dans .env")
        
        print("\n" + "=" * 40)
        print("üéØ R√©sum√©:")
        if constitutions:
            print("‚úÖ Base de donn√©es initialis√©e avec des donn√©es")
        else:
            print("‚ÑπÔ∏è Base de donn√©es vide - normal si aucun fichier n'a √©t√© analys√©")
        
        if pdf_files:
            print(f"‚úÖ {len(pdf_files)} fichier(s) PDF pr√™t(s) √† √™tre analys√©(s)")
        else:
            print("‚ùå Aucun fichier PDF trouv√©")
        
        if openai_api_key:
            print("‚úÖ Configuration OpenAI OK")
        else:
            print("‚ùå Configuration OpenAI manquante")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False
    
    return True

if __name__ == "__main__":
    check_database() 