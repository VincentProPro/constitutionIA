#!/usr/bin/env python3
"""
V√©rification de la couverture compl√®te des articles de 1 √† 199
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models.constitution_data import ConstitutionArticle
from app.core.config import settings
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def verifier_couverture_articles():
    """V√©rifie la couverture des articles de 1 √† 199"""
    try:
        # Cr√©er l'engine de base de donn√©es
        engine = create_engine(settings.DATABASE_URL)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        logger.info("üîç V√âRIFICATION DE LA COUVERTURE DES ARTICLES (1-199)")
        logger.info("=" * 70)
        
        # R√©cup√©rer tous les articles de la base
        all_articles = db.query(ConstitutionArticle).filter(
            ConstitutionArticle.is_active == True
        ).order_by(ConstitutionArticle.article_number).all()
        
        logger.info(f"üìä Total d'articles dans la base: {len(all_articles)}")
        
        # Extraire les num√©ros d'articles pr√©sents
        present_articles = set()
        for article in all_articles:
            try:
                article_num = int(article.article_number)
                present_articles.add(article_num)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è Num√©ro d'article invalide: {article.article_number}")
        
        logger.info(f"üìã Articles pr√©sents: {sorted(present_articles)}")
        
        # V√©rifier la couverture de 1 √† 199
        missing_articles = []
        present_in_range = []
        
        for i in range(1, 200):
            if i in present_articles:
                present_in_range.append(i)
            else:
                missing_articles.append(i)
        
        # Statistiques
        logger.info(f"\nüìà STATISTIQUES DE COUVERTURE:")
        logger.info(f"   Articles pr√©sents (1-199): {len(present_in_range)}")
        logger.info(f"   Articles manquants (1-199): {len(missing_articles)}")
        logger.info(f"   Taux de couverture: {(len(present_in_range)/199)*100:.1f}%")
        
        # Afficher les articles pr√©sents
        logger.info(f"\n‚úÖ ARTICLES PR√âSENTS (1-199):")
        if present_in_range:
            # Grouper par plages pour une meilleure lisibilit√©
            ranges = []
            start = present_in_range[0]
            end = start
            
            for i in range(1, len(present_in_range)):
                if present_in_range[i] == end + 1:
                    end = present_in_range[i]
                else:
                    if start == end:
                        ranges.append(str(start))
                    else:
                        ranges.append(f"{start}-{end}")
                    start = present_in_range[i]
                    end = start
            
            # Ajouter la derni√®re plage
            if start == end:
                ranges.append(str(start))
            else:
                ranges.append(f"{start}-{end}")
            
            logger.info(f"   {', '.join(ranges)}")
        else:
            logger.info("   Aucun article dans la plage 1-199")
        
        # Afficher les articles manquants
        if missing_articles:
            logger.info(f"\n‚ùå ARTICLES MANQUANTS (1-199):")
            # Grouper par plages pour une meilleure lisibilit√©
            ranges = []
            start = missing_articles[0]
            end = start
            
            for i in range(1, len(missing_articles)):
                if missing_articles[i] == end + 1:
                    end = missing_articles[i]
                else:
                    if start == end:
                        ranges.append(str(start))
                    else:
                        ranges.append(f"{start}-{end}")
                    start = missing_articles[i]
                    end = start
            
            # Ajouter la derni√®re plage
            if start == end:
                ranges.append(str(start))
            else:
                ranges.append(f"{start}-{end}")
            
            logger.info(f"   {', '.join(ranges)}")
        
        # Articles hors plage (au-del√† de 199)
        beyond_199 = [num for num in present_articles if num > 199]
        if beyond_199:
            logger.info(f"\nüîç ARTICLES AU-DEL√Ä DE 199:")
            logger.info(f"   {sorted(beyond_199)}")
        
        # Analyse d√©taill√©e des articles pr√©sents
        logger.info(f"\nüìã D√âTAIL DES ARTICLES PR√âSENTS:")
        for article in all_articles:
            try:
                article_num = int(article.article_number)
                if 1 <= article_num <= 199:
                    content_preview = article.content[:50] + "..." if len(article.content) > 50 else article.content
                    logger.info(f"   Article {article_num}: {content_preview}")
            except ValueError:
                continue
        
        # Recommandations
        logger.info(f"\nüí° RECOMMANDATIONS:")
        if len(missing_articles) > 0:
            logger.info(f"   ‚ö†Ô∏è {len(missing_articles)} articles manquants - Consid√©rer l'ajout des articles manquants")
        else:
            logger.info("   ‚úÖ Couverture compl√®te - Tous les articles de 1 √† 199 sont pr√©sents")
        
        if len(present_in_range) < 50:
            logger.info("   ‚ö†Ô∏è Couverture faible - Seulement quelques articles pr√©sents")
        elif len(present_in_range) < 150:
            logger.info("   ‚ö†Ô∏è Couverture partielle - Beaucoup d'articles manquants")
        else:
            logger.info("   ‚úÖ Couverture bonne - La plupart des articles sont pr√©sents")
        
        db.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

if __name__ == "__main__":
    success = verifier_couverture_articles()
    if success:
        logger.info("\nüéâ V√©rification termin√©e!")
    else:
        logger.error("‚ùå V√©rification √©chou√©e!")
        sys.exit(1)
