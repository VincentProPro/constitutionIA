#!/usr/bin/env python3
"""
Vider le cache et tester les am√©liorations
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.services.chatnow_service import OptimizedChatNowService
from app.models.constitution_data import ConstitutionArticle, ConstitutionCache
from app.core.config import settings
import logging
import time

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def vider_cache_et_tester():
    """Vide le cache et teste les am√©liorations"""
    try:
        # Cr√©er l'engine de base de donn√©es
        engine = create_engine(settings.DATABASE_URL)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        logger.info("üßπ VIDAGE DU CACHE ET TEST DES AM√âLIORATIONS")
        logger.info("=" * 60)
        
        # Vider le cache
        logger.info("üßπ Vidage du cache...")
        cache_count = db.execute(text("SELECT COUNT(*) FROM constitution_cache")).scalar()
        logger.info(f"   Entr√©es en cache avant vidage: {cache_count}")
        
        db.execute(text("DELETE FROM constitution_cache"))
        db.commit()
        
        cache_count_apres = db.execute(text("SELECT COUNT(*) FROM constitution_cache")).scalar()
        logger.info(f"   Entr√©es en cache apr√®s vidage: {cache_count_apres}")
        logger.info("‚úÖ Cache vid√© avec succ√®s")
        
        # Initialiser le service ChatNow
        chatnow_service = OptimizedChatNowService(db)
        
        # Questions probl√©matiques √† tester
        questions_test = [
            ("Formation du gouvernement", "comment est form√© le gouvernement"),
            ("Libert√© d'expression", "que dit la constitution sur la libert√© d'expression"),
            ("Devoirs des citoyens", "quels sont les devoirs des citoyens"),
            ("R√©vision constitutionnelle", "comment peut-on r√©viser la constitution"),
            ("Promulgation des lois", "comment sont promulgu√©es les lois"),
            ("Haute trahison", "qu'est-ce que la haute trahison selon la constitution"),
            ("√âtat d'urgence", "quand peut-on d√©clarer l'√©tat d'urgence"),
            ("Dissolution parlementaire", "quand peut-on dissoudre l'assembl√©e nationale")
        ]
        
        results = []
        total_time = 0
        
        logger.info("\nüß™ TEST DES AM√âLIORATIONS (CACHE VID√â)")
        logger.info("-" * 60)
        
        for i, (description, question) in enumerate(questions_test, 1):
            logger.info(f"\nTest {i}: {description}")
            logger.info(f"Question: {question}")
            
            start_time = time.time()
            
            # G√©n√©rer la r√©ponse
            response = chatnow_service.create_chat_response(
                question=question,
                chat_history=None,
                user_id=f"test_cache_vide_{i}"
            )
            
            end_time = time.time()
            response_time = end_time - start_time
            total_time += response_time
            
            logger.info(f"‚è±Ô∏è Temps: {response_time:.2f}s")
            logger.info(f"üìù R√©ponse: {response}")
            
            # Analyser la qualit√© de la r√©ponse
            quality_score = analyser_qualite_reponse(response, question)
            
            results.append({
                'test': i,
                'description': description,
                'question': question,
                'response': response,
                'time': response_time,
                'quality_score': quality_score
            })
            
            logger.info(f"üìä Score qualit√©: {quality_score}/10")
        
        # Analyse des r√©sultats
        logger.info("\n" + "=" * 60)
        logger.info("üìä ANALYSE DES R√âSULTATS")
        logger.info("=" * 60)
        
        # Statistiques g√©n√©rales
        avg_time = total_time / len(results)
        avg_quality = sum(r['quality_score'] for r in results) / len(results)
        
        logger.info(f"‚è±Ô∏è Temps moyen: {avg_time:.2f}s")
        logger.info(f"üìä Qualit√© moyenne: {avg_quality:.1f}/10")
        
        # R√©partition des scores
        excellent = sum(1 for r in results if r['quality_score'] >= 8)
        bon = sum(1 for r in results if 6 <= r['quality_score'] < 8)
        moyen = sum(1 for r in results if 4 <= r['quality_score'] < 6)
        faible = sum(1 for r in results if r['quality_score'] < 4)
        
        logger.info(f"\nüìà R√âPARTITION DES SCORES:")
        logger.info(f"   Excellent (8-10): {excellent}/{len(results)} ({excellent/len(results)*100:.1f}%)")
        logger.info(f"   Bon (6-7): {bon}/{len(results)} ({bon/len(results)*100:.1f}%)")
        logger.info(f"   Moyen (4-5): {moyen}/{len(results)} ({moyen/len(results)*100:.1f}%)")
        logger.info(f"   Faible (0-3): {faible}/{len(results)} ({faible/len(results)*100:.1f}%)")
        
        # Compter les r√©ponses qui citent des articles
        reponses_avec_citations = sum(1 for r in results if contient_citations_articles(r['response']))
        logger.info(f"\nüíæ UTILISATION DE LA BASE DE DONN√âES:")
        logger.info(f"   R√©ponses avec citations d'articles: {reponses_avec_citations}/{len(results)} ({reponses_avec_citations/len(results)*100:.1f}%)")
        
        # V√©rifier le nouveau cache
        nouveau_cache_count = db.execute(text("SELECT COUNT(*) FROM constitution_cache")).scalar()
        logger.info(f"   Nouvelles entr√©es en cache: {nouveau_cache_count}")
        
        # √âvaluation des am√©liorations
        logger.info(f"\nüéØ √âVALUATION DES AM√âLIORATIONS:")
        
        if avg_quality >= 7.0:
            logger.info("‚úÖ EXCELLENT - Les am√©liorations ont consid√©rablement am√©lior√© la pr√©cision")
        elif avg_quality >= 6.0:
            logger.info("‚úÖ BON - Les am√©liorations ont am√©lior√© la pr√©cision")
        elif avg_quality >= 5.0:
            logger.info("‚ö†Ô∏è MOYEN - Les am√©liorations ont eu un effet mod√©r√©")
        else:
            logger.info("‚ùå FAIBLE - Les am√©liorations n√©cessitent des ajustements")
        
        # Comparaison avec les scores pr√©c√©dents
        amelioration = avg_quality - 2.5  # Score moyen avant am√©liorations
        logger.info(f"üìà Am√©lioration estim√©e: +{amelioration:.1f} points")
        
        # Questions am√©lior√©es
        questions_ameliores = sum(1 for r in results if r['quality_score'] >= 6)
        logger.info(f"   Questions am√©lior√©es: {questions_ameliores}/{len(results)} ({questions_ameliores/len(results)*100:.1f}%)")
        
        db.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {e}")
        return False

def analyser_qualite_reponse(reponse, question):
    """Analyse la qualit√© d'une r√©ponse (0-10)"""
    score = 0
    
    # V√©rifier la longueur de la r√©ponse
    if len(reponse) > 50:
        score += 2
    elif len(reponse) > 20:
        score += 1
    
    # V√©rifier la pr√©sence de citations d'articles
    if contient_citations_articles(reponse):
        score += 3
    
    # V√©rifier la pertinence (pas de r√©ponse g√©n√©rique)
    if "n'est pas disponible" not in reponse.lower() and "pas trouv√©" not in reponse.lower():
        score += 2
    
    # V√©rifier la structure (format coh√©rent)
    if "- Article" in reponse or "Article" in reponse:
        score += 1
    
    # V√©rifier la pr√©cision (r√©ponse sp√©cifique √† la question)
    if question.lower() in reponse.lower() or any(mot in reponse.lower() for mot in question.lower().split()):
        score += 1
    
    # Bonus pour les r√©ponses tr√®s d√©taill√©es
    if len(reponse) > 200:
        score += 1
    
    return min(score, 10)

def contient_citations_articles(reponse):
    """V√©rifie si la r√©ponse contient des citations d'articles"""
    import re
    patterns = [
        r'Article\s+\d+',
        r'article\s+\d+',
        r'Art\.\s*\d+',
        r'art\.\s*\d+'
    ]
    
    for pattern in patterns:
        if re.search(pattern, reponse, re.IGNORECASE):
            return True
    return False

if __name__ == "__main__":
    success = vider_cache_et_tester()
    if success:
        logger.info("\nüéâ Test avec cache vid√© termin√©!")
    else:
        logger.error("‚ùå Test avec cache vid√© √©chou√©!")
        sys.exit(1)
