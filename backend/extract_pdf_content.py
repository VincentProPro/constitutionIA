#!/usr/bin/env python3
"""
Script pour extraire le contenu des PDFs et le sauvegarder dans la base de donn√©es
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal
from app.models.constitution import Constitution
from app.services.pdf_analyzer import PDFAnalyzer
from app.core.config import settings
from pathlib import Path

def extract_pdf_content():
    """Extrait le contenu des PDFs et le sauvegarde"""
    print("üìÑ Extraction du contenu des PDFs")
    print("=" * 40)
    
    db = SessionLocal()
    
    try:
        # R√©cup√©rer toutes les constitutions
        constitutions = db.query(Constitution).filter(Constitution.is_active == True).all()
        print(f"üìö Constitutions trouv√©es: {len(constitutions)}")
        
        if not constitutions:
            print("‚ùå Aucune constitution trouv√©e")
            return
        
        for constitution in constitutions:
            print(f"\nüìÑ Traitement: {constitution.title}")
            
            # V√©rifier si le contenu existe d√©j√†
            if constitution.content and len(constitution.content) > 100:
                print(f"‚úÖ Contenu d√©j√† extrait ({len(constitution.content)} caract√®res)")
                continue
            
            # V√©rifier si le fichier existe
            file_path = Path(constitution.file_path) if constitution.file_path else Path("Fichier") / constitution.filename
            if not file_path.exists():
                print(f"‚ùå Fichier non trouv√©: {file_path}")
                continue
            
            print(f"üìÇ Fichier: {file_path}")
            
            # Extraire le contenu
            try:
                pdf_analyzer = PDFAnalyzer(settings.OPENAI_API_KEY or "dummy_key")
                content = pdf_analyzer.extract_text_from_pdf(str(file_path))
                
                if content and len(content) > 100:
                    # Mettre √† jour la base de donn√©es
                    constitution.content = content
                    db.commit()
                    print(f"‚úÖ Contenu extrait et sauvegard√© ({len(content)} caract√®res)")
                    
                    # Afficher un aper√ßu
                    preview = content[:200].replace('\n', ' ')
                    print(f"üìù Aper√ßu: {preview}...")
                    
                else:
                    print(f"‚ùå Contenu trop court ou vide ({len(content) if content else 0} caract√®res)")
                    
            except Exception as e:
                print(f"‚ùå Erreur lors de l'extraction: {e}")
        
        print("\n‚úÖ Extraction termin√©e!")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    extract_pdf_content() 